// Store available photo themes in a map, where the key is the ID of the photo
// theme, and the value is an accent color used for things like buttons,
// controls, etc.
$theme-photos: (
  'word': $blue,
  'worship': $orange,
  'pasture': $green,
  'mountain': $slate,
  'shore': $teal,
  'stars': $royal,
  'evening': $royal,
  'forest': $forest
);

// Dynamically define CSS variables / custom properties using Sass variable
// interpolation
@each $theme-name, $theme-color in join($theme-colors, $theme-photos) {
  .theme-#{$theme-name} {
    --current-theme-color: #{$theme-color};
    --current-theme-color-dark: #{darken($theme-color, 10%)};
  }
}

// Set <body> background as solid color for color themes
.color-theme {
  background-color: var(--current-theme-color);
}
// Since iOS does not support background-attachment:fixed, we must add a
// pseudo-element on the <body> and add the background-image to that
.photo-theme:before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  z-index: -1;
  width: 100%;
  height: 100%;
  background-color: $grey;
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center top;
}
// There is a bug in Chrome where a CSS variable defined as a background-image
// will cause the browser to redundantly repaint and request the image multiple
// times, causing the image to flicker even though it hasn't changed; even
// though we'd prefer to define the image URL as a CSS variable, we need to
// hardcode the background-image per every photo theme in order to avoid the
// flicker / redundant requests
@each $theme-name, $theme-color in $theme-photos {
  .photo-theme.theme-#{$theme-name}:before {
    background-image: url('../../public/images/background-photos/#{$theme-name}.jpg');
  }
}

// Theme-specific adjustments
.theme-mountain {
  background-position: center center;
}
.theme-evening:before {
  background-position: bottom 0 center;
}
