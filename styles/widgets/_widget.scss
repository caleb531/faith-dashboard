// The below transition duration MUST match the setTimeout() value in the
// WidgetShell component
$widget-transition-duration: 350ms;

.widget {
  display: inline-block;
  position: relative;
  min-width: $widget-min-width;
  min-height: $widget-min-height;
  width: 100%;
  margin: $widget-margin-y $widget-margin-x;
  border-radius: 10px;
  background-color: $dark-30;
  @supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
    background-color: $dark-15;
    backdrop-filter: blur(30px);
  }
  box-shadow: 0 3px 5px $dark-10;
  color: $light-100;
  a {
    color: inherit;
  }
  // Ensure that widget settings are never clipped by a manually-set height
  &.widget-settings-open .widget-contents {
    resize: none !important;
    height: auto !important;
  }
  // Transition widget when either adding or removing it (in order for the
  // transitions to behave properly, the transitions can only be enabled when
  // we are actually ready to transition)
  &.adding-widget,
  &.removing-widget {
    transition-property: opacity, margin-bottom;
    transition-duration: $widget-transition-duration;
    transition-timing-function: ease-in-out;
  }
  &.adding-widget {
    margin-bottom: $widget-margin-y !important;
    // In addition to the above style declarations, additional inline styles
    // are added to the widget when it's being added to achieve the desired
    // effect (i.e. the widget slides into view, while the widget below moves
    // out of the way to make room); in order to override these inline styles,
    // the !important keyword must be used within the @keyframes definition
  }
  &.removing-widget {
    transition-property: opacity, margin-bottom;
    transition-duration: $widget-transition-duration;
    transition-timing-function: ease-in-out;
    opacity: 0;
    // In addition to the above style declarations, additional inline styles
    // are added to the widget when it's being removed to achieve the desired
    // effect (i.e. the widget slides up and disappears, while the widget below
    // moves up to take its place)
  }
}
.widget-contents {
  position: relative;
  height: 100%;
  min-width: inherit;
  min-height: inherit;
  border-radius: inherit;
  padding: 20px;
  overflow: hidden;
}

.widget-controls {
  position: absolute;
  $control-spacing-x: 4px;
  $control-spacing-y: $control-spacing-x;
  top: $control-spacing-y;
  z-index: 100;
  display: flex;
  flex-direction: column;
  &-left {
    left: $control-spacing-x;
  }
  &-right {
    right: $control-spacing-x;
  }
}

.widget-control {
  // Disable text selection of these controls
  user-select: none;
  $control-size: 24px;
  width: $control-size;
  height: $control-size;
  padding: 0;
  margin-bottom: 10px;
  border-width: 0;
  box-sizing: content-box;
  background: none !important;
  opacity: 0.5;
  transition: opacity 250ms ease-in-out;
  &:last-of-type {
    margin-bottom: 0;
  }
  @include layout(tablet) {
    margin-bottom: 5px;
  }
  @include layout(desktop) {
    $control-size: 20px;
    width: $control-size;
    height: $control-size;
  }
  .is-not-touch-device .widget:not(:hover) & {
    opacity: 0;
  }
  .is-not-touch-device &:hover {
    opacity: 0.5 !important;
  }
  .is-not-touch-device &:active {
    opacity: 1 !important;
  }
}
.widget-control-icon {
  width: 100%;
  height: 100%;
}

.widget-drag-handle {
  $control-size: 24px;
  width: $control-size;
  height: $control-size;
  position: relative;
  margin-bottom: 0;
  cursor: grab;
  &:active {
    cursor: grabbing;
  }
}

// Increase click area of drag control (for easier dragging)
.widget-controls-left {
  $drag-control-padding: 5px;
  transform: translate(-$drag-control-padding, -$drag-control-padding);
  .widget-drag-handle {
    padding-top: $drag-control-padding;
    padding-left: $drag-control-padding;
  }
}

.widget-settings-open:hover .widget-settings-toggle {
  opacity: 1;
  visibility: visible;
}

.loading-indicator-blocking-container .loading-indicator {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
