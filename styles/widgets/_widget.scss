.widget {
  // The below transition duration MUST match the setTimeout() value in the
  // WidgetShell component
  --widget-transition-duration: 250ms;
  display: inline-block;
  position: relative;
  min-width: var(--widget-min-width);
  min-height: var(--widget-min-height);
  width: 100%;
  margin: var(--widget-margin-y) var(--widget-margin-x);
  border-radius: 10px;
  background-color: var(--color-black-30);
  @supports ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
    background-color: var(--color-black-15);
    backdrop-filter: blur(30px);
  }
  box-shadow: 0 3px 5px var(--color-black-10);
  color: var(--color-white-100);
  a {
    color: inherit;
  }
  label {
    margin-bottom: 5px;
    text-align: center;
    font-size: var(--font-size-xxxs);
  }
  input[type='search'] {
    min-width: 160px;
    width: 75%;
    border-radius: 4px;
  }
  input[type='search'] + button[type='submit'] {
    display: block;
    margin: 0 auto;
    margin-top: 6px;
    font-size: var(--font-size-xxs);
  }
  // Ensure that widget settings are never clipped by a manually-set height
  &.widget-settings-open .widget-contents {
    resize: none !important;
    height: auto !important;
  }
  // Transition widget when either adding or removing it (in order for the
  // transitions to behave properly, the transitions can only be enabled when
  // we are actually ready to transition)
  &.adding-widget,
  &.removing-widget {
    transition-property: opacity, margin-bottom;
    transition-duration: var(--widget-transition-duration);
    transition-timing-function: ease-in-out;
  }
  &.adding-widget {
    opacity: 1 !important;
    margin-bottom: var(--widget-margin-y) !important;
    // In addition to the above style declarations, additional inline styles
    // are added to the widget when it's being added to achieve the desired
    // effect (i.e. the widget slides into view, while the widget below moves
    // out of the way to make room); in order to override these inline styles,
    // the !important keyword must be used within the @keyframes definition
  }
  &.removing-widget {
    transition-property: opacity, margin-bottom;
    transition-duration: var(--widget-transition-duration);
    transition-timing-function: ease-in-out;
    opacity: 0;
    // In addition to the above style declarations, additional inline styles
    // are added to the widget when it's being removed to achieve the desired
    // effect (i.e. the widget slides up and disappears, while the widget below
    // moves up to take its place)
  }
}
.widget-contents {
  position: relative;
  height: 100%;
  min-width: inherit;
  min-height: inherit;
  border-radius: inherit;
  padding: 20px;
  overflow: hidden;
}

.widget-controls {
  position: absolute;
  --control-spacing-x: 4px;
  --control-spacing-y: var(--control-spacing-x);
  top: var(--control-spacing-y);
  z-index: 100;
  display: flex;
  flex-direction: column;
  &-left {
    left: var(--control-spacing-x);
  }
  &-right {
    right: var(--control-spacing-x);
  }
}

.widget-control {
  // Disable text selection of these controls
  user-select: none;
  --control-size: 24px;
  width: var(--control-size);
  height: var(--control-size);
  padding: 0;
  margin-bottom: 10px;
  border-width: 0;
  box-sizing: content-box;
  background: none !important;
  opacity: 0.5;
  transition: opacity 250ms ease-in-out;
  &:last-of-type {
    margin-bottom: 0;
  }
  @include layout(tablet) {
    margin-bottom: 5px;
  }
  @include layout(desktop) {
    --control-size: 20px;
  }
  .is-not-touch-device .widget:not(:hover) & {
    opacity: 0;
  }
  .is-not-touch-device &:hover,
  &:focus-visible {
    opacity: 0.5 !important;
  }
  .is-not-touch-device &:active {
    opacity: 1 !important;
    transition-duration: 0ms;
  }
}
.widget-control-icon {
  width: 100%;
  height: 100%;
}

.widget-drag-handle {
  --control-size: 24px;
  width: var(--control-size);
  height: var(--control-size);
  position: relative;
  margin-bottom: 0;
  cursor: grab;
  &:active {
    cursor: grabbing;
  }
}

// Increase click area of drag control (for easier dragging)
.widget-controls-left {
  --drag-control-padding: 5px;
  transform: translate(
    calc(var(--drag-control-padding) * -1),
    calc(var(--drag-control-padding) * -1)
  );
  .widget-drag-handle {
    padding-top: var(--drag-control-padding);
    padding-left: var(--drag-control-padding);
  }
}

.widget-settings-open:hover .widget-settings-toggle {
  opacity: 1 !important;
  visibility: visible;
}

.loading-indicator-blocking-container .loading-indicator {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
